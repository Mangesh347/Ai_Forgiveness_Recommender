import 'dart:convert';
import 'liquid_ether_background.dart';

import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:video_player/video_player.dart';
import 'package:flutter/services.dart';

const String baseUrl = "http://10.21.108.145:5000";
void main() => runApp(MyApp());

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      title: 'AI Forgiveness Recommender',
      theme: ThemeData.dark().copyWith(
        primaryColor: Colors.black,
        scaffoldBackgroundColor: Colors.black,
        textTheme: TextTheme(bodyMedium: TextStyle(color: Colors.white)),
      ),
      home: LoginScreen(),
    );
  }
}

/// --------------------- Video Widget ---------------------
class LoopingVideo extends StatefulWidget {
  final String asset;
  final double width;
  final double height;

  const LoopingVideo({
    required this.asset,
    this.width = 80,
    this.height = 80,
    Key? key,
  }) : super(key: key);

  @override
  State<LoopingVideo> createState() => _LoopingVideoState();
}

class _LoopingVideoState extends State<LoopingVideo> {
  late VideoPlayerController _controller;

  @override
  void initState() {
    super.initState();
    _controller = VideoPlayerController.asset(widget.asset)
      ..initialize().then((_) {
        setState(() {});
        _controller.setLooping(true);
        _controller.play();
      });
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return _controller.value.isInitialized
        ? SizedBox(
            width: widget.width,
            height: widget.height,
            child: VideoPlayer(_controller),
          )
        : SizedBox(
            width: widget.width,
            height: widget.height,
            child: CircularProgressIndicator(),
          );
  }
}

/// --------------------- Login Screen ---------------------
class LoginScreen extends StatefulWidget {
  @override
  _LoginScreenState createState() => _LoginScreenState();
}

class _LoginScreenState extends State<LoginScreen>
    with TickerProviderStateMixin {
  final emailCtrl = TextEditingController();
  final passCtrl = TextEditingController();
  bool _loading = false;

  InputDecoration _inputDecoration(String hint) {
    return InputDecoration(
      hintText: hint,
      filled: true,
      fillColor: Colors.grey[850],
      border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12), borderSide: BorderSide.none),
    );
  }

  ButtonStyle _buttonStyle(Color color) {
    return ElevatedButton.styleFrom(
      backgroundColor: color,
      padding: EdgeInsets.symmetric(vertical: 14),
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
    );
  }

  Future<void> loginUser() async {
    setState(() => _loading = true);
    try {
      final response = await http.post(
        Uri.parse("$baseUrl/login"),
        headers: {"Content-Type": "application/json"},
        body: jsonEncode({
          "email": emailCtrl.text.trim(),
          "password": passCtrl.text.trim(),
        }),
      );
      setState(() => _loading = false);

      if (response.statusCode == 200) {
        final data = Map<String, dynamic>.from(jsonDecode(response.body));
        final history = (data["history"] ?? [])
            .map<Map<String, dynamic>>((h) => Map<String, dynamic>.from(h))
            .toList();

        // Navigate to chat screen
        Navigator.pushReplacement(
          context,
          MaterialPageRoute(
            builder: (_) => AIChatScreen(
              username: data["username"] ?? "",
              email: data["email"] ?? "",
              history: history,
            ),
          ),
        );
      } else {
        final err = Map<String, dynamic>.from(jsonDecode(response.body));
        ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text(err["error"] ?? "Login failed")));
      }
    } catch (e) {
      setState(() => _loading = false);
      ScaffoldMessenger.of(context)
          .showSnackBar(SnackBar(content: Text("Network error: $e")));
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: LiquidEtherBackground(
        vsync: this,
        child: Center(
          child: LayoutBuilder(
            builder: (context, constraints) {
              double boxWidth =
                  constraints.maxWidth < 600 ? constraints.maxWidth * 0.9 : 400;
              return Container(
                width: boxWidth,
                padding: EdgeInsets.all(30),
                decoration: BoxDecoration(
                  color: Colors.black.withOpacity(0.85),
                  borderRadius: BorderRadius.circular(16),
                  boxShadow: [
                    BoxShadow(
                      color: Colors.black54,
                      blurRadius: 12,
                      offset: Offset(0, 6),
                    )
                  ],
                ),
                child: SingleChildScrollView(
                  child: Column(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      Image.asset(
                        "assets/Recommder_Logo.png",
                        width: 80,
                        height: 80,
                      ),
                      SizedBox(height: 16),
                      Text(
                        "Join the Path to Forgiveness 🕊️",
                        textAlign: TextAlign.center,
                        style: TextStyle(
                          fontSize: 18,
                          fontWeight: FontWeight.w600,
                          color: Colors.white70,
                        ),
                      ),
                      SizedBox(height: 24),
                      Text("Login",
                          style: TextStyle(
                              fontSize: 28,
                              fontWeight: FontWeight.bold,
                              color: Colors.white)),
                      SizedBox(height: 20),
                      TextField(
                          controller: emailCtrl,
                          decoration: _inputDecoration("Email")),
                      SizedBox(height: 15),
                      TextField(
                          controller: passCtrl,
                          obscureText: true,
                          decoration: _inputDecoration("Password")),
                      SizedBox(height: 25),
                      SizedBox(
                        width: double.infinity,
                        child: ElevatedButton(
                          onPressed: _loading ? null : loginUser,
                          style: _buttonStyle(Colors.blue),
                          child: _loading
                              ? CircularProgressIndicator(color: Colors.white)
                              : Text("Login",
                                  style: TextStyle(
                                      fontSize: 16,
                                      fontWeight: FontWeight.bold)),
                        ),
                      ),
                      SizedBox(height: 10),
                      TextButton(
                        onPressed: () => Navigator.push(
                          context,
                          MaterialPageRoute(builder: (_) => SignupScreen()),
                        ),
                        child: Text("Create account",
                            style: TextStyle(color: Colors.blueAccent)),
                      ),
                    ],
                  ),
                ),
              );
            },
          ),
        ),
      ),
    );
  }
}

/// --------------------- Signup Screen ---------------------
class SignupScreen extends StatefulWidget {
  @override
  _SignupScreenState createState() => _SignupScreenState();
}

class _SignupScreenState extends State<SignupScreen>
    with TickerProviderStateMixin {
  final nameCtrl = TextEditingController();
  final emailCtrl = TextEditingController();
  final passCtrl = TextEditingController();
  bool _loading = false;

  InputDecoration _inputDecoration(String hint) {
    return InputDecoration(
      hintText: hint,
      filled: true,
      fillColor: Colors.grey[850],
      border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12), borderSide: BorderSide.none),
    );
  }

  ButtonStyle _buttonStyle(Color color) {
    return ElevatedButton.styleFrom(
      backgroundColor: color,
      padding: EdgeInsets.symmetric(vertical: 14),
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
    );
  }

  Future<void> signupUser() async {
    setState(() => _loading = true);

    try {
      final response = await http.post(
        Uri.parse("$baseUrl/signup"),
        headers: {"Content-Type": "application/json"},
        body: jsonEncode({
          "username": nameCtrl.text.trim(),
          "email": emailCtrl.text.trim(),
          "password": passCtrl.text.trim(),
        }),
      );
      setState(() => _loading = false);

      if (response.statusCode == 200) {
        Navigator.pop(context);
        ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text("Signup successful! Please login.")));
      } else {
        final err = Map<String, dynamic>.from(jsonDecode(response.body));
        ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text(err["error"] ?? "Signup failed")));
      }
    } catch (e) {
      setState(() => _loading = false);
      ScaffoldMessenger.of(context)
          .showSnackBar(SnackBar(content: Text("Network error: $e")));
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: LiquidEtherBackground(
        vsync: this,
        child: Center(
          child: LayoutBuilder(
            builder: (context, constraints) {
              double boxWidth =
                  constraints.maxWidth < 600 ? constraints.maxWidth * 0.9 : 400;
              return Container(
                width: boxWidth,
                padding: EdgeInsets.all(30),
                decoration: BoxDecoration(
                  color: Colors.black.withOpacity(0.85),
                  borderRadius: BorderRadius.circular(16),
                  boxShadow: [
                    BoxShadow(
                      color: Colors.black54,
                      blurRadius: 12,
                      offset: Offset(0, 6),
                    )
                  ],
                ),
                child: SingleChildScrollView(
                  child: Column(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      Image.asset(
                        "assets/Recommder_Logo.png",
                        width: 80,
                        height: 80,
                      ),
                      SizedBox(height: 16),
                      Text(
                        "Join the Path to Forgiveness 🕊️",
                        textAlign: TextAlign.center,
                        style: TextStyle(
                          fontSize: 18,
                          fontWeight: FontWeight.w600,
                          color: Colors.white70,
                        ),
                      ),
                      SizedBox(height: 24),
                      Text("Signup",
                          style: TextStyle(
                              fontSize: 28,
                              fontWeight: FontWeight.bold,
                              color: Colors.white)),
                      SizedBox(height: 20),
                      TextField(
                          controller: nameCtrl,
                          decoration: _inputDecoration("Name")),
                      SizedBox(height: 15),
                      TextField(
                          controller: emailCtrl,
                          decoration: _inputDecoration("Email")),
                      SizedBox(height: 15),
                      TextField(
                          controller: passCtrl,
                          obscureText: true,
                          decoration: _inputDecoration("Password")),
                      SizedBox(height: 25),
                      SizedBox(
                        width: double.infinity,
                        child: ElevatedButton(
                          onPressed: _loading ? null : signupUser,
                          style: _buttonStyle(Colors.green),
                          child: _loading
                              ? CircularProgressIndicator(color: Colors.white)
                              : Text("Create Account",
                                  style: TextStyle(
                                      fontSize: 16,
                                      fontWeight: FontWeight.bold)),
                        ),
                      ),
                    ],
                  ),
                ),
              );
            },
          ),
        ),
      ),
    );
  }
}

/// --------------------- AI Chat Screen ---------------------
class AIChatScreen extends StatefulWidget {
  final String username;
  final String email;
  final List<Map<String, dynamic>>? history;

  AIChatScreen({
    required this.username,
    required this.email,
    this.history,
  });

  @override
  _AIChatScreenState createState() => _AIChatScreenState();
}

class _AIChatScreenState extends State<AIChatScreen> {
  final List<String> religions = [
    "Hinduism",
    "Christianity",
    "Islam",
    "Sikhism",
    "Judaism",
    "Baháʼí Faith",
    "Jainism",
    "Shinto",
    "Taoism / Daoism",
    "Buddhism"
  ];

  String selectedReligion = "Hinduism";
  final TextEditingController _controller = TextEditingController();
  final ScrollController _scrollController = ScrollController();
  final TextEditingController _searchCtrl = TextEditingController();
  bool _isLoading = false;
  bool _isSidebarMinimized = false;
  List<Map<String, dynamic>> savedChats = [];
  int currentChatIndex = -1;

  Map<String, String> religionDefaultLang = {
    "Hinduism": "en",
    "Christianity": "en",
    "Islam": "en",
    "Sikhism": "en",
    "Judaism": "en",
    "Baháʼí Faith": "en",
    "Jainism": "en",
    "Shinto": "en",
    "Taoism / Daoism": "en",
    "Buddhism": "en",
  };

  @override
  void initState() {
    super.initState();
    if (widget.history != null && widget.history!.isNotEmpty) {
      savedChats =
          widget.history!.map((h) => Map<String, dynamic>.from(h)).toList();
      currentChatIndex = 0;
    }
  }

  List<Map<String, dynamic>> get currentChatHistory {
    if (currentChatIndex == -1 || savedChats.isEmpty) return [];
    final msgs = savedChats[currentChatIndex]["messages"] ?? [];
    return List<Map<String, dynamic>>.from(msgs);
  }

  void updateCurrentChatHistory(List<Map<String, dynamic>> newMessages) {
    if (currentChatIndex == -1) return;
    setState(() {
      savedChats[currentChatIndex]["messages"] = newMessages;
    });
  }

  void newChat() {
    setState(() {
      savedChats.insert(0, {
        "title": "New Chat",
        "messages": [],
        "religion": selectedReligion,
        "defaultLang": religionDefaultLang[selectedReligion] ?? "en",
      });
      currentChatIndex = 0;
    });
  }

  void _scrollToBottom() {
    Future.delayed(Duration(milliseconds: 200), () {
      if (_scrollController.hasClients) {
        _scrollController.jumpTo(_scrollController.position.maxScrollExtent);
      }
    });
  }

  Future<void> getAdvice(String conflict, String religion) async {
    if (conflict.trim().isEmpty || _isLoading) return;
    if (currentChatIndex == -1) newChat();

    final msgs = List<Map<String, dynamic>>.from(currentChatHistory);
    msgs.add({"message": conflict, "sender": "user"});
    msgs.add({"message": "", "sender": "AI", "thinking": true});
    updateCurrentChatHistory(msgs);
    _scrollToBottom();
    setState(() => _isLoading = true);

    try {
      final res = await http.post(
        Uri.parse("$baseUrl/get_advice"),
        headers: {"Content-Type": "application/json"},
        body: jsonEncode({
          "email": widget.email,
          "conflict_description": conflict,
          "religion": religion,
          "language": "en",
        }),
      );

      final newMsgs = List<Map<String, dynamic>>.from(currentChatHistory);
      newMsgs.removeWhere((m) => m["thinking"] == true);
      updateCurrentChatHistory(newMsgs);

      if (res.statusCode == 200) {
        final data = jsonDecode(res.body);
        final advice = (data["advice"] ?? "").toString().trim();
        String display = "";
        for (int i = 0; i < advice.length; i++) {
          display += advice[i];
          final temp = List<Map<String, dynamic>>.from(currentChatHistory);
          if (temp.isEmpty || temp.last["sender"] != "AI") {
            temp.add({
              "message": display,
              "sender": "AI",
              "original": advice,
              "currentLang": "en",
            });
          } else {
            temp.last["message"] = display;
          }
          updateCurrentChatHistory(temp);
          _scrollToBottom();
          await Future.delayed(const Duration(milliseconds: 25));
        }
      } else {
        newMsgs.add({"message": "Error: ${res.body}", "sender": "AI"});
        updateCurrentChatHistory(newMsgs);
      }
    } catch (e) {
      final errMsgs = List<Map<String, dynamic>>.from(currentChatHistory)
        ..add({"message": "Network error: $e", "sender": "AI"});
      updateCurrentChatHistory(errMsgs);
    } finally {
      setState(() => _isLoading = false);
      _scrollToBottom();
    }
  }

  @override
  Widget build(BuildContext context) {
    final chatHistory = currentChatHistory;

    return Scaffold(
      body: Row(
        children: [
          /// ------------------ Sidebar ------------------
          AnimatedContainer(
            duration: Duration(milliseconds: 300),
            width: _isSidebarMinimized ? 70 : 250,
            color: Colors.grey[900],
            child: Column(
              children: [
                Container(
                  color: Colors.black87,
                  padding: EdgeInsets.symmetric(horizontal: 8, vertical: 8),
                  child: Row(
                    children: [
                      LoopingVideo(
                          asset: "assets/video1.mp4", width: 40, height: 40),
                      Spacer(),
                      IconButton(
                        icon: Icon(
                          _isSidebarMinimized
                              ? Icons.arrow_right
                              : Icons.arrow_left,
                          color: Colors.white,
                        ),
                        onPressed: () {
                          setState(
                              () => _isSidebarMinimized = !_isSidebarMinimized);
                        },
                      ),
                    ],
                  ),
                ),
                Padding(
                  padding: EdgeInsets.symmetric(horizontal: 8, vertical: 8),
                  child: Column(
                    children: [
                      ListTile(
                        leading:
                            Icon(Icons.add_circle_outline, color: Colors.white),
                        title: _isSidebarMinimized
                            ? null
                            : Text("New Chat",
                                style: TextStyle(color: Colors.white)),
                        onTap: newChat,
                      ),
                      if (!_isSidebarMinimized)
                        TextField(
                          controller: _searchCtrl,
                          style: TextStyle(color: Colors.white),
                          decoration: InputDecoration(
                            prefixIcon:
                                Icon(Icons.search, color: Colors.white70),
                            hintText: "Search chat \nChats",
                            hintStyle: TextStyle(color: Colors.white54),
                            filled: true,
                            fillColor: const Color.fromARGB(255, 49, 48, 48),
                            border: OutlineInputBorder(
                              borderRadius: BorderRadius.circular(12),
                              borderSide: BorderSide.none,
                            ),
                          ),
                          onChanged: (val) {
                            setState(() {});
                          },
                        ),
                    ],
                  ),
                ),
                Expanded(
                  child: ListView.builder(
                    itemCount: savedChats.length,
                    itemBuilder: (context, i) {
                      final chatTitle = savedChats[i]["title"] ?? "Untitled";
                      if (_searchCtrl.text.isNotEmpty &&
                          !chatTitle
                              .toLowerCase()
                              .contains(_searchCtrl.text.toLowerCase())) {
                        return SizedBox.shrink();
                      }
                      return ListTile(
                        leading: Icon(Icons.chat, color: Colors.white),
                        title: _isSidebarMinimized
                            ? null
                            : Text(chatTitle,
                                style: TextStyle(color: Colors.white)),
                        onTap: () => setState(() => currentChatIndex = i),
                      );
                    },
                  ),
                ),
                Container(
                  color: Colors.grey[850],
                  padding: EdgeInsets.symmetric(horizontal: 12, vertical: 12),
                  child: Row(
                    children: [
                      CircleAvatar(
                        backgroundColor: Colors.blue,
                        child: Text(
                          widget.username.isNotEmpty
                              ? widget.username[0].toUpperCase()
                              : "?",
                          style: TextStyle(color: Colors.white),
                        ),
                      ),
                      if (!_isSidebarMinimized) SizedBox(width: 12),
                      if (!_isSidebarMinimized)
                        Expanded(
                          child: Text(widget.username,
                              style: TextStyle(color: Colors.white)),
                        ),
                    ],
                  ),
                ),
              ],
            ),
          ),

          /// ------------------ Main Chat ------------------
          Expanded(
            child: Column(
              children: [
                Container(
                  alignment: Alignment.centerLeft,
                  padding: EdgeInsets.all(12),
                  child: DropdownButton<String>(
                    value: selectedReligion,
                    dropdownColor: Colors.grey[900],
                    style: TextStyle(color: Colors.white),
                    items: religions
                        .map((r) => DropdownMenuItem(value: r, child: Text(r)))
                        .toList(),
                    onChanged: (val) {
                      if (val != null) setState(() => selectedReligion = val);
                    },
                  ),
                ),
                Expanded(
                  child: chatHistory.isEmpty
                      ? Center(
                          child: Column(
                            mainAxisAlignment: MainAxisAlignment.center,
                            children: [
                              LoopingVideo(
                                  asset: "assets/video3.mp4",
                                  width: 120,
                                  height: 120),
                              SizedBox(height: 20),
                              Text("Your road to peace begins here… 🕊️✨",
                                  style: TextStyle(
                                      color: Colors.white70,
                                      fontSize: 18,
                                      fontWeight: FontWeight.w500)),
                              SizedBox(height: 10),
                              Text("Ask me anything about forgiveness",
                                  style: TextStyle(
                                      color: Colors.white54, fontSize: 14)),
                            ],
                          ),
                        )
                      : ListView.builder(
                          controller: _scrollController,
                          itemCount: chatHistory.length,
                          itemBuilder: (context, i) {
                            final isUser = chatHistory[i]["sender"] == "user";
                            final message =
                                chatHistory[i]["message"]?.toString() ?? "";
                            return Padding(
                              padding: const EdgeInsets.symmetric(
                                  vertical: 6, horizontal: 120),
                              child: Align(
                                alignment: isUser
                                    ? Alignment.centerRight
                                    : Alignment.centerLeft,
                                child: isUser
                                    ? Container(
                                        padding: EdgeInsets.all(12),
                                        decoration: BoxDecoration(
                                          color: Colors.blue[100],
                                          borderRadius:
                                              BorderRadius.circular(12),
                                        ),
                                        child: SelectableText(
                                          message,
                                          style: TextStyle(color: Colors.black),
                                        ),
                                      )
                                    : Container(
                                        padding: EdgeInsets.all(12),
                                        decoration: BoxDecoration(
                                          color: Colors.grey[800],
                                          borderRadius:
                                              BorderRadius.circular(12),
                                        ),
                                        child: SelectableText(
                                          message,
                                          style: TextStyle(color: Colors.white),
                                        ),
                                      ),
                              ),
                            );
                          },
                        ),
                ),
                Container(
                  padding: EdgeInsets.all(12),
                  color: Colors.grey[900],
                  child: Row(
                    children: [
                      Expanded(
                        child: TextField(
                          controller: _controller,
                          style: TextStyle(color: Colors.white),
                          decoration: InputDecoration(
                            hintText: "Describe your conflict...",
                            hintStyle: TextStyle(color: Colors.white54),
                            filled: true,
                            fillColor: Colors.grey[800],
                            border: OutlineInputBorder(
                              borderRadius: BorderRadius.circular(12),
                              borderSide: BorderSide.none,
                            ),
                          ),
                          onSubmitted: (val) =>
                              getAdvice(val, selectedReligion),
                        ),
                      ),
                      SizedBox(width: 8),
                      ElevatedButton(
                        onPressed: _isLoading
                            ? null
                            : () =>
                                getAdvice(_controller.text, selectedReligion),
                        child: _isLoading
                            ? SizedBox(
                                width: 20,
                                height: 20,
                                child: CircularProgressIndicator(
                                  color: Colors.white,
                                  strokeWidth: 2,
                                ),
                              )
                            : Icon(Icons.send),
                      ),
                    ],
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}


 now just update and give me updated copy paste full code only